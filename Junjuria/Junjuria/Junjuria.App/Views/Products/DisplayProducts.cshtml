@model IEnumerable<ProductMinifiedOutDto>

@{
    ViewData["Title"] = "View Products";
}

<div class="d-flex justify-content-center pt-2">
    <h1 class="m-0"><i class="fas fa-search"></i> &nbsp; @ViewData["Title"]</h1>
</div>
<hr class="hr-jun w-50 my-2" />
<center>
    <div class="w-75 justify-content-center">
        <div class="w-50 justify-content-center">
            @if (ViewData.ContainsKey("SubHead1"))
            {
                <h4>@(((string[])ViewData["SubHead1"])[0])<em> <span class="text-success"> @(((string[])ViewData["SubHead1"]).Length > 1 ? ((string[])ViewData["SubHead1"])[1] : "") </span></em></h4>
            }
            @if (ViewData.ContainsKey("SubHead2"))
            {
                <h5>@(((string[])ViewData["SubHead2"])[0])<em> <span class="text-success"> @(((string[])ViewData["SubHead2"]).Length > 1 ? ((string[])ViewData["SubHead2"])[1] : "") </span></em></h5>
            }
            <hr class="hr-jun  my-2" />
        </div>
    </div>

    <div class="row d-flex justify-content-around">

        @foreach (var product in Model.OrderByDescending(x => x.IsAvailable))
        {
            <partial name="_ProductPartial" model="product" />
        }
    </div>
    @if (!string.IsNullOrEmpty(ViewBag.PageNavigation))
    {
        string actionName = ViewBag.PageNavigation.ToString();
        string eventualSearchPhrase = ViewData.ContainsKey("Phrase") ? ViewData["Phrase"].ToString() : "";
        string eventualManufacturerId = ViewData.ContainsKey("ManufacturerId") ? ViewData["ManufacturerId"].ToString() : "";
        @Html.PagedListPager((IPagedList)Model, pageNum => Url.Action(actionName, new { pageNum = pageNum, phrase = eventualSearchPhrase, manufacturerId = eventualManufacturerId }),
    new PagedListRenderOptions
         {
        LiElementClasses = new string[] { "page-item" },
        PageClasses = new string[] { "page-link" }
         })
    }


    @section SidebarFilter{
        <br /><br />
        @*<h4>Filtering Code...</h4>*@
    }
</center>